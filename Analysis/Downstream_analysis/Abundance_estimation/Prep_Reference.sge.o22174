Settings:
  Output files: "Trinity.fasta.bowtie.*.ebwt"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 5 (one in 32)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  Trinity.fasta
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 4441558
Using parameters --bmax 3331169 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 3331169 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:01
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2.22078e+06 (target: 3331168)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (3331169) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 2467512
  (Using difference cover)
  Sorting block time: 00:00:05
Returning block of 2467513
Getting block 2 of 8
  Reserving size (3331169) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1503155
  (Using difference cover)
  Sorting block time: 00:00:03
Returning block of 1503156
Getting block 3 of 8
  Reserving size (3331169) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 2080053
  (Using difference cover)
  Sorting block time: 00:00:03
Returning block of 2080054
Getting block 4 of 8
  Reserving size (3331169) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 3000427
  (Using difference cover)
  Sorting block time: 00:00:05
Returning block of 3000428
Getting block 5 of 8
  Reserving size (3331169) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 2493020
  (Using difference cover)
  Sorting block time: 00:00:05
Returning block of 2493021
Getting block 6 of 8
  Reserving size (3331169) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 2809639
  (Using difference cover)
  Sorting block time: 00:00:05
Returning block of 2809640
Getting block 7 of 8
  Reserving size (3331169) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 2704918
  (Using difference cover)
  Sorting block time: 00:00:05
Returning block of 2704919
Getting block 8 of 8
  Reserving size (3331169) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 707501
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 707502
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 3405266
fchr[G]: 8893387
fchr[T]: 14324303
fchr[$]: 17766232
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 10893872 bytes to primary EBWT file: Trinity.fasta.bowtie.1.ebwt
Wrote 2220784 bytes to secondary EBWT file: Trinity.fasta.bowtie.2.ebwt
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 17766232
    bwtLen: 17766233
    sz: 4441558
    bwtSz: 4441559
    lineRate: 6
    linesPerSide: 1
    offRate: 5
    offMask: 0xffffffe0
    isaRate: -1
    isaMask: 0xffffffff
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 555195
    offsSz: 2220780
    isaLen: 0
    isaSz: 0
    lineSz: 64
    sideSz: 64
    sideBwtSz: 56
    sideBwtLen: 224
    numSidePairs: 39657
    numSides: 79314
    numLines: 79314
    ebwtTotLen: 5076096
    ebwtTotSz: 5076096
    reverse: 0
Total time for call to driver() for forward index: 00:00:41
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:01
bmax according to bmaxDivN setting: 4441558
Using parameters --bmax 3331169 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 3331169 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:01
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2.53803e+06 (target: 3331168)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (3331169) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 2750545
  (Using difference cover)
  Sorting block time: 00:00:05
Returning block of 2750546
Getting block 2 of 7
  Reserving size (3331169) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 3098750
  (Using difference cover)
  Sorting block time: 00:00:06
Returning block of 3098751
Getting block 3 of 7
  Reserving size (3331169) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 2400698
  (Using difference cover)
  Sorting block time: 00:00:04
Returning block of 2400699
Getting block 4 of 7
  Reserving size (3331169) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 2111940
  (Using difference cover)
  Sorting block time: 00:00:04
Returning block of 2111941
Getting block 5 of 7
  Reserving size (3331169) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 2230706
  (Using difference cover)
  Sorting block time: 00:00:04
Returning block of 2230707
Getting block 6 of 7
  Reserving size (3331169) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1977329
  (Using difference cover)
  Sorting block time: 00:00:04
Returning block of 1977330
Getting block 7 of 7
  Reserving size (3331169) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 3196258
  (Using difference cover)
  Sorting block time: 00:00:06
Returning block of 3196259
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 3405266
fchr[G]: 8893387
fchr[T]: 14324303
fchr[$]: 17766232
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 10893872 bytes to primary EBWT file: Trinity.fasta.bowtie.rev.1.ebwt
Wrote 2220784 bytes to secondary EBWT file: Trinity.fasta.bowtie.rev.2.ebwt
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 17766232
    bwtLen: 17766233
    sz: 4441558
    bwtSz: 4441559
    lineRate: 6
    linesPerSide: 1
    offRate: 5
    offMask: 0xffffffe0
    isaRate: -1
    isaMask: 0xffffffff
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 555195
    offsSz: 2220780
    isaLen: 0
    isaSz: 0
    lineSz: 64
    sideSz: 64
    sideBwtSz: 56
    sideBwtLen: 224
    numSidePairs: 39657
    numSides: 79314
    numLines: 79314
    ebwtTotLen: 5076096
    ebwtTotSz: 5076096
    reverse: 0
Total time for backward call to driver() for mirror index: 00:00:42
rsem-synthesis-reference-transcripts /nobackup/data9/Pseudomonas_putida_transcriptome_project/Analysis/Downstream_analysis/Abundance_estimation/Trinity.fasta.RSEM 0 1 Trinity.fasta.gene_trans_map Trinity.fasta
Transcript Information File is generated!
Group File is generated!
Chromosome List File is generated!
Extracted Sequences File is generated!

rsem-preref /nobackup/data9/Pseudomonas_putida_transcriptome_project/Analysis/Downstream_analysis/Abundance_estimation/Trinity.fasta.RSEM.transcripts.fa 1 /nobackup/data9/Pseudomonas_putida_transcriptome_project/Analysis/Downstream_analysis/Abundance_estimation/Trinity.fasta.RSEM -l 125
Refs.makeRefs finished!
Refs.saveRefs finished!
/nobackup/data9/Pseudomonas_putida_transcriptome_project/Analysis/Downstream_analysis/Abundance_estimation/Trinity.fasta.RSEM.idx.fa is generated!
/nobackup/data9/Pseudomonas_putida_transcriptome_project/Analysis/Downstream_analysis/Abundance_estimation/Trinity.fasta.RSEM.n2g.idx.fa is generated!

